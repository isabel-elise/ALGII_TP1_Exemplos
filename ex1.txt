Mojibake (Japanese: 文字化け; IPA: [mod͡ʑibake]) is the garbled text that is the result of text being decoded using an unintended character encoding.[1] The result is a systematic replacement of symbols with completely unrelated ones, often from a different writing system.

This display may include the generic replacement character ("�") in places where the binary representation is considered invalid. A replacement can also involve multiple consecutive symbols, as viewed in one encoding, when the same binary code constitutes one symbol in the other encoding. This is either because of differing constant length encoding (as in Asian 16-bit encodings vs European 8-bit encodings), or the use of variable length encodings (notably UTF-8 and UTF-16).

Failed rendering of glyphs due to either missing fonts or missing glyphs in a font is a different issue that is not to be confused with mojibake. Symptoms of this failed rendering include blocks with the code point displayed in hexadecimal or using the generic replacement character. Importantly, these replacements are valid and are the result of correct error handling by the software.

Etymology
Mojibake means "character transformation" in Japanese. The word is composed of 文字 (moji, IPA: [mod͡ʑi]), "character" and 化け (bake, IPA: [bäke̞], pronounced "bah-keh"), "transform".

Causes
To correctly reproduce the original text that was encoded, the correspondence between the encoded data and the notion of its encoding must be preserved. As mojibake is the instance of non-compliance between these, it can be achieved by manipulating the data itself, or just relabeling it.

Mojibake is often seen with text data that have been tagged with a wrong encoding; it may not even be tagged at all, but moved between computers with different default encodings. A major source of trouble are communication protocols that rely on settings on each computer rather than sending or storing metadata together with the data.

The differing default settings between computers are in part due to differing deployments of Unicode among operating system families, and partly the legacy encodings' specializations for different writing systems of human languages. Whereas Linux distributions mostly switched to UTF-8 in 2004,[2] Microsoft Windows generally uses UTF-16, and sometimes uses 8-bit code pages for text files in different languages.[dubious – discuss]

For some writing systems, an example being Japanese, several encodings have historically been employed, causing users to see mojibake relatively often. As a Japanese example, the word mojibake "文字化け" stored as EUC-JP might be incorrectly displayed as "ﾊｸｻ�ｽ､ｱ", "ﾊｸｻ嵂ｽ､ｱ" (MS-932), or "ﾊｸｻ郾ｽ､ｱ" (Shift JIS-2004). The same text stored as UTF-8 is displayed as "譁�蟄怜喧縺�" if interpreted as Shift JIS. This is further exacerbated if other locales are involved: the same UTF-8 text appears as "æ–‡å­—åŒ–ã‘" in software that assumes text to be in the Windows-1252 or ISO-8859-1 encodings, usually labelled Western, or (for example) as "鏂囧瓧鍖栥亼" if interpreted as being in a GBK (Mainland China) locale.

Mojibake example
Original text	文	字	化	け
Raw bytes of EUC-JP encoding	CA	B8	BB	FA	B2	BD	A4	B1
Bytes interpreted as Shift-JIS encoding	ﾊ	ｸ	ｻ	郾	ｽ	､	ｱ
Bytes interpreted as ISO-8859-1 encoding	Ê	¸	»	ú	²	½	¤	±
Bytes interpreted as GBK encoding	矢	机	步	け

